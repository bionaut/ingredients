(function(){
  'use strict';
  angular.module('text.component', [])
    .directive('iText', iText);

  iText.$inject=[];
  function iText() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/text/text.template.html',
      scope:{
        model: '=?',
        label: '@?',
        inline: '@?',
        xid: '@?'
      }
    };
  }

})();

/**
 * Created by bionaut on 25/06/15.
 */

(function () {
  'use strict';
  angular.module('iSwitch.component', [])
    .directive('setWidth', setWidth)
    .directive('iSwitch', iSwitch);

  function iSwitch() {
    return {
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/switch/iSwitch.template.html',
      replace: true,
      scope: {
        options: '=?',
        viewAs: '@?',
        returnAs: '@?',
        model: '=?',
        default: '@?',
        onChange: '=?',
        readOnly: '=?',
        name: '@?',
        validate: '@?',
        inactive: '=?',
        counts: '=?',
        xid: '@?'
      },
      controller: iSwitchController,
      controllerAs: 'vm',
      bindToController: true
    };
  }

  iSwitchController.$inject = [
    'iUtils'
  ];
  function iSwitchController(iUtils) {
    var vm = this;

    // methods
    vm.handleClick = handleClick;
    vm.getDataLength = getDataLength;
    vm.isActive = isActive;
    vm.isInactive = isInactive;
    vm.resolveFn = resolveFn;
    vm.viewValue = resolveView;
    vm.getCount = getCount;

    if (vm.default) {
      handleClick(vm.options[vm.default], vm.default);
    }

    /////////////////////////////////////////////////////////

    function handleClick(option, index) {
      if (isInactive(index)) return void 0;
      vm.model = resolveFn(option, index);
      if (vm.onChange) {
        vm.onChange(vm.model);
      }
    }

    function getDataLength() {
      if (angular.isArray(vm.options)) {
        return vm.options.length;
      } else if (angular.isObject(vm.options)) {
        return Object.keys(vm.options).length;
      }
    }

    function resolveFn(option, index) {
      if (vm.returnAs) {
        return option[vm.returnAs];
      }
      return index;
    }

    function isActive(option, index) {
      return vm.model == resolveFn(option, index);
    }

    function isInactive(index) {
      if (vm.inactive && vm.inactive.length > 0) {
        return vm.inactive.indexOf(index) > -1;
      }
    }

    function selectedOption() {
      var array = iUtils.arrayify(vm.options);
      var filtered = array ? array.filter(isActive) : [];
      return filtered[0];
    }

    function resolveView() {
      var option = selectedOption();
      return option ? option[vm.viewAs] || option : null;
    }

    function getCount(index) {
      if (vm.counts && vm.counts[index] && vm.counts[index] > 50) {
        return '50+';
      }else{
        return vm.counts[index];
      }
    }

  }



  function setWidth() {
    return {
      restrict: "A",
      link: function (s, e, a) {
        e.css({
          width: (100 / a.setWidth) + '%'
        })
      }
    }
  }
})();

/**
 * Created by bionaut on 14/06/15.
 */


(function () {
  'use strict';
  angular.module('select.component', [])
    .directive('iSelect', iSelect);

  function iSelect() {
    var directive = {
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/select/select.template.html',
      scope: {},
      controller: iSelectController,
      controllerAs: 'iSelect',
      bindToController: {
        data: '=',
        returnAs: '@',
        viewAs: '@',
        searchable: '@?',
        placeholder: '@?',
        template: '@?',
        default: '@?',
        name: '@?',
        label: '@?',
        inline: '@?',
        model: '=',
        change: '=?',
        tooltip: '@?',
        readOnly: '=?',
        validate: '@?',
        format: '@?',
        maxLength: '@?',
        preventReadOnly: '@?',
        xid: '@?'
      },
      link: linkFn
    };


    function linkFn(s, e, a) {
      e.on('click mousedown', function (ev) {
        s.iSelect.blurred = false;
        ev.stopPropagation();
      });

      e.find('input').on('blur', function (ev) {
        s.iSelect.handleInputEvents();
      })
    }

    iSelectController.$inject = [
      '$scope',
      '$timeout',
      '$element',
      'iUtils',
      '$rootScope',
      '$q'
    ];
    function iSelectController($scope, $timeout, $element, iUtils, $rootScope, $q) {

      var iSelect = this;
      var s = $scope;

      // methods
      iSelect.getReadOnlyValue = getReadOnlyValue;
      iSelect.handleSelect = handleSelect;
      iSelect.handleReset = handleReset;
      iSelect.handleInputEvents = handleInputEvents;
      iSelect.openList = openList;
      iSelect.closeList = closeList;
      iSelect.toggleList = toggleList;
      iSelect.retrieveProperty = retrieveProperty;
      iSelect.emitEvent = emitEvent;


      // watch data property for changes
      s.$watch('iSelect.data', handleRefresh);

      // watch model
      s.$watch('iSelect.model', handleModelChange);

      // watch searchQuery
      s.$watch('iSelect.searchQuery', function () {
        iSelect.blurred = true;
      });

      // close list on 'closeContextual' event
      s.$on('closeContextual', closeList);

      // generate UID for iSelect
      iSelect.uid = iUtils.guid();

      //init
      init();

      function init() {
        iSelect.ready = false;

        if (!iSelect.data) return void 0;

        iSelect.items = {
          returns: [],
          views: []
        };

        var _deferred = $q.defer();
        var _promise = _deferred.promise;
        _promise
          .then(function () {
            if (typeof iSelect.data === 'object' &&
              (iSelect.data instanceof Array === false)) {
              iSelect.listData = iUtils.arrayify(iSelect.data);
            } else {
              iSelect.listData = iSelect.data;
            }
          })
          .then(function () {
            angular.forEach(iSelect.listData, function (item) {
              if (item) {
                iSelect.items.returns.push(retrieveProperty(item, iSelect.returnAs));
                iSelect.items.views.push(retrieveProperty(item, iSelect.viewAs).toString().toLowerCase());
              }
            });
          }).then(function () {
            initModel();
            setDefault();

            //decideReadOnly();

            // turn the component on
            iSelect.ready = true;
          });
        _deferred.resolve();
      }

      // DATA

      function initModel() {
        //check if in list
        var _index = iSelect.items.returns.indexOf(iSelect.model);
        if (_index === -1) {
          iSelect.model = undefined;
        } else {
          handleSelect(iSelect.listData[_index]);
        }
      }

      function getReadOnlyValue() {
        return retrieveProperty(iSelect.selected, iSelect.viewAs) || iSelect.placeholder;
      }

      function setDefault() {
        if (iSelect.default && iSelect.listData) {
          handleSelect(iSelect.listData[iSelect.default]);
        }
      }

      function decideReadOnly() {
        // if there is only one item in list and override===false make read-only
        if (iSelect.listData && iSelect.listData.length === 1) {
          handleSelect(iSelect.listData[0]);
          iSelect.readOnly = (iSelect.preventReadOnly) ?
            false : true;
        } else {
          iSelect.readOnly = ($element[0].attributes.readOnly) ?
            $element[0].attributes.readOnly : false;
        }
      }

      // HANDLERS
      function handleReset() {
        iSelect.selected = undefined;
        iSelect.model = undefined;
        iSelect.searchQuery = undefined;
        iSelect.listToggle = false;
      }

      function handleInputEvents() {
        var _lng = iSelect.listData.length;
        var _count = 0;
        iSelect.match = false;

        $timeout(function () {
          if (!iSelect.blurred) {
            return void 0;
          }
          angular.forEach(iSelect.listData, function (item) {
            var _item = retrieveProperty(item, iSelect.viewAs);
            if (iSelect.searchQuery &&
              _item.toString().toLowerCase() === iSelect.searchQuery.toString().toLowerCase()) {
              iSelect.match = true;
              handleSelect(item);
            }

            if (++_count === _lng && !iSelect.match && iSelect.blurred) {
              handleReset();
            }
          });
        })
      }

      function handleSelect(item) {
        if (angular.isUndefined(item)) return void 0;
        var _index = iSelect.listData.indexOf(item);
        iSelect.selected = item;
        iSelect.model = (iSelect.returnAs === '$index') ? _index : item[iSelect.returnAs];
        iSelect.searchQuery = (iSelect.searchable) ? retrieveProperty(iSelect.selected, iSelect.viewAs) : '';
        iSelect.listToggle = false;
      }

      function handleModelChange(nVal, oVal) {
        iSelect.blurred = true;

        while (iSelect.ready === false) {
          return void 0;
        }

        // check if value is in list
        var _indexOf = iSelect.items.returns.indexOf(nVal);
        if (_indexOf > -1) {
          handleSelect(iSelect.listData[_indexOf]);
          if (iSelect.change && nVal !== oVal) {
            iSelect.change(nVal);
          }
        }

        if (angular.isUndefined(nVal)) {
          handleReset();
        }
      }

      function handleRefresh(nVal, oVal) {
        if (nVal === oVal) return void 0;
        init();
      }

      // UI
      function openList() {
        // TODO //$rootScope.$broadcast('closeContextual');
        if (!iSelect.searchQuery) return void 0;
        generateList();
        iSelect.listToggle = true;
      }

      function closeList(event,data) {
        if (!data.id || data.id !== iSelect.uid){
          iSelect.listToggle = false;
          s.$applyAsync();
        }
      }

      function generateList() {
        var width = $element[0].children[0].clientWidth;
        var height = $element[0].children[0].clientHeight;
        var list = $element[0].getElementsByClassName('i-select-list');
        list[0].style.minWidth = width + 'px';
        list[0].style.top = height + 'px';
        list[0].style.minHeight = height / 2 + 'px';
      }

      function toggleList() {
        $rootScope.$broadcast('closeContextual', {id: iSelect.uid});
        generateList();
        iSelect.listToggle = !iSelect.listToggle;
      }

      // UTILS
      function retrieveProperty(obj, path) {
        if (!obj) return void 0;
        return objectPath.get(obj, path);
      }

      function emitEvent() {
        $rootScope.$broadcast('closeContextual', {id: iSelect.uid});
      }

    }

    return directive;
  }

})();

(function(){
  'use strict';
  angular.module('row.component', [])
    .directive('iRow', iRow);

  iRow.$inject = [];
  function iRow() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/row/row.template.html',
      transclude: true,
      replace: true,
      scope:{
        rowLabel: '@?label',
        classes: '@?',
        optional: '@?',
        tooltip: '@?',
        required: '@?',
        xid: '@?'
      },
      controller: iRowController,
      controllerAs: 'iRow'
    };
  }

  iRowController.$inject = [];
  function iRowController() {
    var iRow = this;
  }

})();

/**
 * Created by bionaut on 02/10/15.
 */

(function () {
  'use strict';
  angular.module('onEnter.component', [])
    .directive('onEnter', OnEnter);

  function OnEnter() {
    return function (scope, element, attrs) {
      element.bind("keydown keypress",
        function (event) {
          var keyCode = event.which || event.keyCode;

          // If enter key is pressed
          if (keyCode === 13) {
            scope.$apply(function () {
              // Evaluate the expression
              scope.$eval(attrs.onEnter);
            });
            event.preventDefault();
          }
        });
    };
  }

})();

/**
 * Created by bionaut on 30/10/15.
 */


(function () {
  'use strict';
  angular.module('iMaxLength.component', [])
    .directive('iMaxLength', IMaxLength);

  IMaxLength.$inject = [
    'iUtils'
  ];
  function IMaxLength(iUtils) {
    return function (s, e, a) {
      var _conf = a.iMaxLength.trim().split(':');
      var _max = (_conf) ? parseInt(_conf[0]) : undefined;
      var _maxDecimals = (_conf[1]) ? parseInt(_conf[1]) : undefined;

      if (isNaN(_max) || _max === undefined || _max === null) return void 0;

      e.on('keypress', function (ev) {

        if (ev.which < 0x20) {
          return;
        }

        var _currentValue = e[0].value;

        var isDecimal =
          _conf[1] &&
          _currentValue &&
          (_currentValue.indexOf(',') > -1 ||
          _currentValue.indexOf('.') > -1);

        var _decimalPosition = (isDecimal) ? findDecimal(_currentValue) : 0;

        // prevent another dot, comma - only one of those this time :)
        if (isDecimal && (ev.which === 44 || ev.which === 46)) {
          ev.preventDefault();
          return void 0;
        }

        if (_conf[1] && !isDecimal && _currentValue.length === _max && (ev.which === 44 || ev.which === 46)) {
          return void 0;
        }

        // is decimal number
        // prevent more decimals then in _conf[1]
        if (isDecimal && _currentValue.length >= (_decimalPosition + _maxDecimals + 1)) {
          if (!isTextSelected(e[0])) ev.preventDefault();
        }

        // no decimal number
        if (!isDecimal && _currentValue.length >= _max) {
          // only preventDefault when text is not selected
          if (!isTextSelected(e[0])) ev.preventDefault();
        }
      });
    };
  }

  // function that check if the text is selected in the input
  function isTextSelected(input) {
    if (typeof input.selectionStart == "number") {
      return input.selectionStart == 0 && input.selectionEnd == input.value.length;
    } else if (typeof document.selection != "undefined") {
      input.focus();
      return document.selection.createRange().text == input.value;
    }
  }

  function findDecimal(string) {
    return (string.indexOf(',') > -1) ?
      string.indexOf(',') : (string.indexOf('.') > -1) ?
      string.indexOf('.') : undefined;
  }

})();

/**
 * Created by bionaut on 09/11/15.
 */

(function(){
  'use strict';
  angular.module('focusMe.component', [])
    .directive('focusMe', FocusMe);

  FocusMe.$inject = [];
  function FocusMe() {
    return {
      restrict: 'A',
      scope: true,
      bindToController: {
        focusMe: '=?'
      },
      controller: FocusMeController,
      controllerAs: 'focus'
    };
  }


  FocusMeController.$inject = ['$element', '$scope'];
  function FocusMeController($element, $scope) {
    var focus = this;
    $scope.$watch('focus.focusMe', function (nVal, oVal) {
      if (focus.focusMe){
        $element[0].focus()
      }
    });


  }



})();

(function(){
  'use strict';
  angular.module('field.component', [])
    .directive('iField', iField);

  iField.$inject=['$compile'];
  function iField($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };


    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var debounce = (a.debounce) ? ' ng-model-options="{debounce: '+ a.debounce +'}"': '';
            var fieldClasses = ' class="i-field ' + (a.classes || '') + ' " ng-class="{error: checkErrors()}"';
            var inputClasses = ' class="i-field-input' +( (a.inline) ? ' inline' : '') +( (a.label) ? '' : ' nolabel') + '"';
            var labelClasses = ' class="i-field-label' +( (a.inline) ? ' inline' : '') +( (a.required) ? ' required' : '') + '"';
            var ui_mask = (a.mask) ? ' ui-mask="' + a.mask + '"':'';
            var inputName = (a.name) ? ' name="' + a.name + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var labelAttr = (a.label) ? ' label="' + a.label + '"' : '';
            var kind = (a.type) ? ' type="' + a.type + '"' : 'type="text"';
            var id = (a.id) ? ' id="'+ a.id || a.name +'"' : '';
            var placeholder = (a.placeholder) ? ' placeholder="'+ a.placeholder +'"' : '';
            var regex = (a.regex) ? ' pattern="'+ a.regex +'"' : '';
            var focus = (a.focus) ? ' autofocus' : '';
            var tooltip = (a.tooltip) ? ' <rb-helper tooltip="'+ a.tooltip +'"></rb-helper>' : '';
            var onEnter = (a.onEnter) ? ' on-enter="'+ a.onEnter +'"' : '';
            var xid = (a.xid) ? ' xid="'+ a.xid +'"' : '';
            var maxLength= (a.maxLength) ? ' i-max-length="'+ a.maxLength +'"' : '';

            var required = (a.required) ? ' ng-required="'+a.required+'"' : '';

            var label = (a.label) ? '<label ' + labelClasses + ' for="'+ id +'">'+a.label+'</label>' : '';
            var focusMe = (a.focusMe) ? ' focus-me="'+ a.focusMe+'"' : '';
            var noAutocomplete = (a.noAutocomplete) ? ' autocomplete="off"' : '';

            // custom directives
            var iFormat = (a.format) ? ' i-format="'+ a.format+'"' : '';
            var iValid = (a.validate) ? ' i-valid = "'+ a.validate + '"' : '';


            var html =
              '<div' + fieldClasses + '>' +
                label + tooltip +
                '<input ng-hide="' + a.readOnly + '" ' +
                  onEnter +
                  inputClasses +
                  id +
                  xid +
                  kind +
                  model +
                  labelAttr +
                  debounce +
                  inputName+
                  ui_mask +
                  disabled +
                  placeholder +
                  regex +
                  iFormat +
                  iValid +
                  required +
                  focus +
                  maxLength +
                  focusMe +
                  noAutocomplete +
                '/>' +
                '<div class="read-only" ng-show="'+ a.readOnly+'" ng-bind="'+ a.model +'"></div>' +
                '<div class="fieldErrorMessages" ng-if="!form.$globalErrors" ng-show="form.$submitted">' +
                    '<div class="fieldErrorMessage" ng-repeat="(key,error) in errors track by $index">{{ overrideMessage || getErrorMessage(key) }}</div>'+
                '</div>'+
              '</div>' ;

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){
  'use strict';
  angular
    .module('error.component', [])
    .directive('iError', iError);

  iError.$inject = ['iValid'];
  function iError(iValid) {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/error/error.template.html',
      require: '?^form',
      controller: iErrorController,
      controllerAs: 'error',
      bindToController: true,
      link: function(scope, element, attrs, form) {
        //FIXME: this is horrible

        scope.title = (attrs.title) ? attrs.title : '';

        form.$globalErrors = true;

        function show(submitted, errors) {
          scope.show = submitted && errors && errors.length > 0;
        }

        scope.$watch('form.$submitted', function(submitted) {
          show(submitted, scope.errors);
        });

        scope.$watch('form.$error', function (err) {
          if (!err) {
            return;
          }
          var errorObjects = Object.keys(err).reduce(function(previous, key) {
            var errors = err[key]
              .map(function(arr) {
                var message = iValid.validators[key] ? iValid.validators[key].message : key;
                return {
                  name: arr.$label || arr.$name,
                  error: message
                }
              });
            return previous.concat(errors);
          }, []);

          var messages = errorObjects.map(function(errorObject) {
            return errorObject.error + ': ' + errorObject.name;
          });
          scope.errors = messages;

          show(form.$submitted, messages);
        }, true);
      }
    };
  }

  iErrorController.$inject = ['$scope', 'iValid'];
  function iErrorController($scope, iValid) {
    var error = this;
  }

})();

(function(){

  'use strict';

  angular
    .module('radio.component', [])
    .directive('iRadio', iRadio);

  iRadio.$inject = [
    '$compile'
  ];
  function iRadio($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };

    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var fieldClasses = ' class="i-radio" ng-class="{error: checkErrors()}"';
            var inputName = (a.name) ? ' name="' + a.name + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var id = (a.id) ? ' id="'+ a.id || a.name +'"' : '';
            var xid = (a.xid) ? ' x-id="'+ a.xid +'"' : '';

            var label = '<label class="radiolabel" for="'+ id +'">'+a.label+'</label>';

            var html =
              '<div' + fieldClasses + '>' +
                '<input' +
                  id + xid +
                  ' type="radio"' +
                  model +
                  inputName +
                  disabled +
                '/>' +
                label +
              '</div>';

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){

  'use strict';

  angular
    .module('checkbox.component', [])
    .directive('iCheckbox', iCheckbox);

  iCheckbox.$inject = [
    '$compile'
  ];
  function iCheckbox($compile) {
    return{
      restrict: 'E',
      replace: true,
      scope: true,
      compile: compileFn
    };

    function compileFn() {
      return {
        pre:
          function (scope, iElement, attrs) {

            var a = attrs;

            var inputName = (a.name) ? ' name="' + (a.name || a.id) + '"': '';
            var disabled = (a.disabled) ? ' ng-disabled="'+ a.disabled + '"' : '';
            var model = (a.model) ? ' ng-model="'+ a.model +'"' : '';
            var id = (a.id) ? ' id="'+ a.id +'"' : ' id="' +  a.name + '"';
            var validate = (a.validate) ? ' i-valid = "'+ a.validate + '"' : '';

            var xid = (a.xid) ? ' x-id="'+ a.xid +'"' : '';
            var label = '<label class="checkboxlabel" for="'+ (a.id || a.name) +'">' + (a.label || '') + '</label>';

            var html =
              '<div' + '>' +
                '<input' +
                  id + xid +
                  ' type="checkbox"' +
                  model +
                  inputName +
                  disabled +
                  validate +
                '/>' +
                label +
              '</div>';

            var elementToInject = angular.element(html);
            iElement.replaceWith(elementToInject);
            $compile(elementToInject)(scope);
          }
      };
    }
  }

})();

(function(){
  'use strict';
  angular.module('button.component', [])
    .directive('iButton', iButton);

  iButton.$inject = [];
  function iButton() {
    return {
      priority: 1,
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/button/button.template.html',
      replace: true,
      require: '?^^form',
      scope:{
        title:'@?',
        type: '@?',
        name: '@?',
        xid: '@?',
        iDisabled: '=?'
      },
      controller: iButtonController,
      controllerAs: 'iButton',
      link: {
        pre: function(scope, element, attrs, form) {
          if (attrs.type){
            element[0].setAttribute('type', attrs.type);
          }else{
            element[0].setAttribute('type', 'button');
          }
          element.on('click', function(event) {
            if (scope.iDisabled) {
              event.preventDefault();
              event.stopImmediatePropagation();
              if (form) {
                form.$setSubmitted(true);
                scope.$evalAsync();
              }
            }
          });
        }
      }
    };
  }

  iButtonController.$inject = ['$scope'];
  function iButtonController($scope) {
    var iButton = this;

    iButton.type = $scope.type || 'button';

  }

})();

(function(){
  'use strict';
  angular
    .module('alert.component', [])
    .directive('iAlert', iAlert);

  iAlert.$inject = [];
  function iAlert() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iForm/components/alert/alert.template.html',
      transclude: true,
      scope:{
        type: '@',
        title: '@?',
        messages: '=',
        closeable: '@?'
      },
      controller: iAlertController,
      controllerAs: 'alert',
      bindToController: true
    };
  }

  iAlertController.$inject = ['$scope', 'iValid'];
  function iAlertController($scope, iValid) {
    var alert = this;
  }

})();

/**
 * Created by bionaut on 14/06/15.
 */

(function(){

  'use strict';

  angular
    .module('iValid.module', [])
    .provider('iValid', iValid);

  iValid.$inject = [];
  function iValid() {

    var validators = {};
    var formatters = {};

    return {
      newValidator: function (name, validator, errorMessage, dynamic) {
        validators[name] = {
          definition: validator,
          message: errorMessage,
          dynamic: !!dynamic
        }
      },
      newFormatter: function (name, formatter) {
        formatters[name] = {
          definition: formatter
        }
      },

      $get: [function() {
        return {
          validators: validators,
          formatters: formatters
        }
      }]
    };
  }

})();

/**
 * Created by bionaut on 20/06/15.
 */

(function(){
  'use strict';
  angular.module('iValid.module')
    .config(Config);

  Config.$inject = ['iValidProvider'];
  function Config(iValidProvider) {

    iValidProvider.newValidator('number', number, 'This is not a number');
    iValidProvider.newValidator('email', null, 'This is not an valid email');
    iValidProvider.newValidator('date', null, 'This is not a valid date');
    iValidProvider.newValidator('url', null, 'This is not a valid url');

    iValidProvider.newValidator('pattern', null, 'This field is invalid!');

  }

  function number(value) {

  }

})();

/**
 * Created by bionaut on 14/06/15.
 */

(function() {

  'use strict';

  angular
    .module('iValid.module')
    .config(Config);

  Config.$inject = [
    'iValidProvider'
  ];
  function Config(iValidProvider) {

    iValidProvider.newValidator('maxLength', maxLength, 'This is too long!');
    iValidProvider.newValidator('minLength', minLength, 'Too short!');
    iValidProvider.newValidator('required', required, 'This field is required!');
    iValidProvider.newValidator('match', match, 'This should match the other field!', true);
    iValidProvider.newValidator('unique', unique, 'This should be different from the other field!', true);

    function maxLength(value, max) {
      if (value) {
        return value.toString().length <= max;
      } else {
        return true;
      }
    }

    function minLength(value, min) {
      if (value) {
        return value.toString().length >= min;
      } else {
        return true;
      }
    }

    function required(value) {
      if (value) {
        return value.toString().length > 0;
      } else {
        return false;
      }
    }

    function match(value, scope, model) {
      var matchingValue = model(scope)
      if (value && matchingValue) {
        return value === matchingValue;
      } else {
        return true;
      }
    }

    function unique(value, scope, model) {
      var uniqueValue = model(scope);
      if (value && uniqueValue) {
        return value !== uniqueValue;
      } else {
        return true;
      }
    }
  }
})();

(function(){
  'use strict';
  angular.module('iValid.module')
    .config(Config);

  Config.$inject = ['iValidProvider'];
  function Config(iValidProvider) {

    iValidProvider.newFormatter('maxLength', maxLength);

    function maxLength(value, max) {
      if (angular.isUndefined(value) || value===null || value==='') {
        return true;
      }

      value = value.toString();

      return (value.length <= max);
    }

  }
})();

/**
 * Created by bionaut on 14/06/15.
 */

(function(){
  'use strict';
  angular
    .module('iForm.components', [
      'field.component',
      'select.component',
      'row.component',
      'checkbox.component',
      'radio.component',
      'text.component',
      'iSwitch.component',
      'button.component',
      'alert.component',
      'error.component',
      'onEnter.component',
      'iMaxLength.component',
      'focusMe.component'
    ]);
})();

(function () {
  'use strict';
  angular.module('iValid.module')
    .directive('iValid', iValidate)
    .directive('iFormat', iFormat);

  iValidate.$inject = [
    '$parse',
    'iValid',
    'iUtils'
  ];
  function iValidate($parse, iValid, iUtils) {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: LinkFn
    };

    function LinkFn(scope, element, attrs, ngModel) {
      if (attrs.iValid.length > 0) {
        attrs.iValid = attrs.iValid.replace(/\s+/g, '');

        var validationObject = iUtils.parseValidators(attrs.iValid);

        angular.forEach(validationObject, function (rules, key) {
          var validator = iValid.validators[key];

          if (validator.dynamic) {
            ngModel.$validators[key] = function (value) {
              var parsedRules = rules.map(function (rule) {
                return $parse(rule);
              });
              var args = [value, scope].concat(parsedRules);
              return validator.definition.apply(this, args);
            };
            scope.$watchGroup(rules, ngModel.$validate, true);
          } else {
            ngModel.$validators[key] = function (value) {
              var args = [value].concat(rules);
              return validator.definition.apply(this, args);
            };
          }
        });

        ngModel.$label = attrs.label;

        scope.$watch('errors', function () {
          scope.errors = ngModel.$error;
          scope.isDirty = ngModel.$dirty;
        }, true);

        // adds error object to scope of the field

        scope.checkErrors = checkErrors;
        scope.getErrorMessage = getErrorMessage;

      }

      function checkErrors() {
        var obj = scope.errors;
        if (obj == null) return false;
        if (obj.length > 0)    return true;
        if (obj.length === 0)  return false;
        for (var key in obj) {
          if (hasOwnProperty.call(obj, key)) return true;
        }
        return false;
      }

      function getErrorMessage(key) {
        if (typeof iValid.validators[key] === 'undefined') {
          console.info('Unknown validator: ', key);
          return void 0;
        }
        return iValid.validators[key].message;
      }

    }
  }

  iFormat.$inject = [
    'iValid',
    'iUtils'
  ];
  function iFormat(iValid, iUtils) {
    return {
      restrict: 'A',
      require: '?ngModel',
      link: LinkFn
    };

    function LinkFn(scope, element, attrs, ngModel) {

      if (attrs.iFormat.length > 0) {
        attrs.iFormat = attrs.iFormat.replace(/\s+/g, '');

        var formatterObject = iUtils.string2Object(attrs.iFormat);

        angular.forEach(formatterObject, function (param, key) {

          var view_value;

          function formatFn(value) {
            var return_value;

            if (iValid.formatters[key] === undefined) {
              return console.info('Unknown formatter: ' + key)
            }

            if (iValid.formatters[key].definition(value, param)) {

              // if OK
              return_value = value;
              view_value = return_value;
              ngModel.$setValidity(key, true);
            } else {

              //if NOT ok
              return_value = view_value;
              ngModel.$setViewValue(view_value || '');
              ngModel.$render();
              ngModel.$setValidity(key, true);
            }
            return return_value;
          }

          ngModel.$formatters.push(formatFn);
          ngModel.$parsers.push(formatFn);

        });
      }
    }
  }

})();

(function(){
  'use strict';
  angular.module('iUtils.module', [])
    .run(Run);

  Run.$inject = ['$rootScope'];
  function Run($rootScope) {
    document.addEventListener('click', function (ev) {
      $rootScope.$broadcast('closeContextual', {event: ev});
    });
  }


})();

(function(){
  'use strict';
  angular.module('iUtils.module')
    .service('iUtils', iUtils);

  function iUtils() {
    return{
      string2Object: string2Object,
      parseValidators: parseValidators,
      deepFind: deepFind,
      objectByString: objectByString,
      arrayify: arrayify,
      objectify: objectify,
      getIndex: getIndex,
      guid: guid
    };
  }

  function string2Object(value) {
    return value.split('|').reduce(function (accumulator, val) {
      var pair = val.trim().split(':');
      accumulator[pair[0]] = pair[1] || null;
      return accumulator;
    }, {});
  }

  function parseValidators(validators) {
    return validators.split('|').reduce(function(accumulator, validator) {
      var tuple = validator.trim().split(':');
      var name = tuple[0];
      var rules = tuple.slice(1, tuple.length);
      accumulator[name] = rules && rules.length > 0 ? rules : null;
      return accumulator;
    }, {});

  }

    // use string to find
    function deepFind(obj, path) {
      var paths = path.split('.');
      var current = obj;
      var i;

      for (i = 0; i < paths.length; ++i) {
        if (current[paths[i]] == undefined) {
          return undefined;
        } else {
          current = current[paths[i]];
        }
      }
      return current;
    }

  function objectByString(o, s) {
    s = s.replace(/\[(\w+)\]/g, '.$1');
    s = s.replace(/^\./, '');
    var a = s.split('.');
    for (var i = 0, n = a.length; i < n; ++i) {
      var k = a[i];
      if (k in o) {
        o = o[k];
      } else {
        return;
      }
    }
    return o;
  }

  function arrayify(collection) {
    if (angular.isArray(collection)) {
      return collection;
    } else if (angular.isObject(collection)) {
      return Object.keys(collection).map(function(key) {
        var item = collection[key];
        item.$key = key;
        return item;
      });
    }
  }

  function objectify(collection) {
    if (angular.isArray(collection)) {
      return collection.reduce(function(object, item) {
        var key = item.$key;
        delete item.$key;
        object[key] = item;
        return object;
      }, {});
    } else if (angular.isObject(collection)) {
      return collection;
    }
  }

  function getIndex(item, collection) {
    if (angular.isArray(collection)) {
      return collection.indexOf(item);
    } else if (angular.isObject(collection)) {
      return Object.keys(collection)
        .filter(function(key){
          return collection[key] === item;
        })[0];
    }
  }

  function guid() {
    function s4() {
      return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
      s4() + '-' + s4() + s4() + s4();
  }


})();

(function() {

  'use strict';

  angular
    .module('iUtils.module')
    .filter('filterObject', filterObject);

  filterObject.$inject = [
    '$filter',
    'iUtils'
  ];
  function filterObject($filter, iUtils) {
    return function(collection, expression, comparator) {
      var filteredArray = $filter('filter')(iUtils.arrayify(collection), expression, comparator);
      return iUtils.objectify(filteredArray);
    };
  }
})();

/**
 * Created by bionaut on 24/06/15.
 */
(function(){
  'use strict';
  angular.module('iStep.module', []);

})();

/**
 * Created by bionaut on 24/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStepTemplate', iStepTemplate);

  iStepTemplate.$inject = [];
  function iStepTemplate() {
    return{
      restrict: 'E',
      link: linkFn
    };
    function linkFn(s,e,a) {
      s.$parent.iStepCtrl.steps.push(a.src);
    }

  }

})();

/**
 * Created by bionaut on 25/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStepNext', iStepNext);

  function iStepNext() {
    return{
      restrict: 'A',

    };
  }
})();

/**
 * Created by bionaut on 24/06/15.
 */

(function(){
  'use strict';
  angular.module('iStep.module')
    .directive('iStep', iStep);

  iStep.$inject = [];
  function iStep() {
    return{
      restrict: 'E',
      templateUrl: 'app/modules/iStep/iStep.template.html',
      transclude: true,
      controller: iStepController,
      controllerAs: 'iStepCtrl',
      step: '=?'
    };

  }

  iStepController.$inject = ['$scope'];
  function iStepController($scope) {
    var iStepCtrl = this;

    // variables
    iStepCtrl.steps = [];

    //methods
    iStepCtrl.goTo = goTo;
    iStepCtrl.amIActive = amIActive;


    // one way switch
    $scope.$watch('step', function (n,o) {
      if (o === n) return;
      iStepCtrl.activeStep = $scope.step;
    });

    //activate first step
    $scope.$watch('iStepCtrl.steps', function (n,o) {
      iStepCtrl.activeStep = iStepCtrl.steps[0] || '';
    });


    function goTo(dot) {
      iStepCtrl.activeStep = dot;
    }

    function amIActive(dot) {
      return dot === iStepCtrl.activeStep;
    }
  }
})();

/**
 * Created by bionaut on 08/06/15.
 */

(function(){
  'use strict';
  angular.module('iModal.module', [])
    .factory('iModal', iModal);

  iModal.$inject = ['$document', '$compile', '$rootScope', '$http'];
  function iModal($document, $compile, $rootScope, $http) {
    var buffer = {};
    var body = $document[0].body;

    return{
      open: openModal,
      load: loadModal,
      closeModal: closeModal,
      getBuffer: getBuffer
    };

    function openModal(content) {
      var modalElement = $compile( "<i-modal>"+ content +"</i-modal>" )($rootScope.$new());
      angular.element(body).append(modalElement);
    }

    function closeModal() {
    //  TODO
    }

    function loadModal(url, vm) {
      buffer = vm || {};
      $http.get(url)
        .then(
        function (data) {
          var modalElement = $compile( '<i-modal>'+ data.data+'</i-modal>')($rootScope.$new());
          angular.element(body).append(modalElement);
        },
        function (err) {
        //  error
        }
      );
    }

    function getBuffer() {
      return buffer;
    }
  }

})();

/**
 * Created by bionaut on 08/06/15.
 */

(function(){
  'use strict';
  angular.module('iModal.module')
    .directive('iModal', iModalDirective);

  iModalDirective.$inject = [];
  function iModalDirective() {
    return {
      restrict: 'E',
      templateUrl: 'app/modules/iModal/iModal.template.html',
      transclude: true,
      scope:false,
      controller: iModalController,
      controllerAs: 'vm'
    };
  }

  iModalController.$inject = ['$scope','$element', 'iModal'];
  function iModalController($scope, $element, iModal) {
    $scope.closeModal = closeModal;
    $scope.vm = iModal.getBuffer();

    function closeModal() {
      $scope.$destroy();
      $element.remove();
    }

  }

})();

(function(){
  'use strict';
  angular.module('iForm.module', ['iForm.components'])
    .directive('iForm', iForm);

  iForm.$inject = ['$compile'];
  function iForm($compile) {
    return {
      restrict: 'E',
      scope: true,
      transclude: true,
      link: linkFn,
      controller: 'FormController',
      controllerAs: 'formCtrl'
    };


    function linkFn(s,e,a,c, $transcludeFn) {
      var submit = (a.submit) ? ' ng-submit="'+ a.submit +'"' : '';
      var name = a.name || a.id;
      var classes = ' class="i-form ' + (a.classes || '') + ' "';
      var xid = (a.xid) ? ' x-id="' + a.xid + '"': '';
      var noAutocomplete = (a.noAutocomplete) ? ' autocomplete="off"' : '';

      var formElement =
        '<form ' + classes + xid + noAutocomplete +
          'name="' + name + '"' +
          'id="' + name + '" novalidate' +
               submit +
        '>' +
        '</form>';

      var html = $compile(formElement)(s);
      var form = s[name];
      s.form = form;

      $transcludeFn(s, function (clone) {
        html.append(clone);
        e.replaceWith(html);
      });

      function submitIfValid(event) {
        event.preventDefault();
        c.submitted = true;
        if (form.$valid) {
          c.submit();
        }
      }
    }
  }

})();

(function(){
  'use strict';
  angular.module('iForm.module')
    .controller('FormController', FormController);

  FormController.$inject = [];
  function FormController() {
    var formCtrl = this;
  }

})();

/**
 * Created by janci on 12/10/14.
 */

angular.module('iFile.module', [])
  .directive('iFile', iFile);


  function iFile() {
    return {
      restricts: 'AE',
      scope: {
        model: '=?',
        multifile: '@?'
      },
      templateUrl: 'app/modules/iFile/iFile.template.html',
      replace: true,
      link: linkFn
    };

    function linkFn(s, e, a) {
      var Upload, elemento, processFiles;

      elemento = e[0];

      processFiles = function(files) {
        var _tmp, file, i, len, results, upload;
        s.uploadedSuccessfully = false;
        s.uploadError = false;
        if (s.multifile) {
          _tmp = [];
          results = [];
          for (i = 0, len = files.length; i < len; i++) {
            file = files[i];
            results.push(_tmp.push(new Upload(file)));
          }
          return results;
        } else {
          return upload = new Upload(files[0]);
        }
      };

      Upload = (function() {
        function Upload(source) {

          this.file = source;

          if (!this.checkFile(this.file)) return;

          this.reader = new FileReader();
          this.reader.onload = (function(_this) {
            return function() {
              if (s.multifile) {
                s.model = s.model || [];
                s.model.push(_this.reader.model);
                s.$apply();
              } else {
                s.model = _this.reader.model;
                //_this.upload(_this.reader.model);
                s.$apply();
              }
            };
          })(this);
          this.reader.readAsDataURL(this.file);
        }

        //Upload.prototype.uploadedSuccessfully = function() {
        //  s.uploadedSuccessfully = true;
        //  return s.uploadError = false;
        //};
        //
        //Upload.prototype.uploadError = function() {
        //  s.uploadedSuccessfully = false;
        //  return s.uploadError = true;
        //};

        Upload.prototype.checkFile = function(file) {
          if (file.type.match(/^image\W/) !== null) {
            return true;
          } else {
            alert('Only images are allowed!');
            return false;
          }
        };

        return Upload;

      })();


      // ** event catchers **
      elemento.addEventListener('change', (function(_this) {
        return function(ev) {
          var files;
          files = ev.target.files;
          return processFiles(files);
        };
      })(this));
      elemento.addEventListener('dragover', function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return ev.dataTransfer.dropEffect = 'copy';
      });
      elemento.addEventListener('drop', (function(_this) {
        return function(ev) {
          var files;
          ev.stopPropagation();
          ev.preventDefault();
          files = ev.target.files || ev.dataTransfer.files;
          return processFiles(files);
        };
      })(this));
    }

  }

(function(){
  'use strict';

  angular.module('angular-ingredients.js',
    [
      // vendor
      'ngSanitize',
      'ui.router',
      'ngAnimate',
      'ui.mask',

      // core
      'ingredients.modules'
    ])

})();



(function(){
  'use strict';
  angular.module('angular-ingredients.js')
    .controller('stepSample', stepSample);

  function stepSample() {
    var ctrl = this;

    ctrl.sampleData = 'Step controller sample...';
  }
})();

(function () {
  'use strict';
  angular.module('angular-ingredients.js')
    .controller('sampleCtrl', sampleCtrl);

  sampleCtrl.$inject = ['$timeout'];
  function sampleCtrl($timeout) {
    var ctrl = this;

    ctrl.handleSubmit = function (form) {
      alert('submitted');
    };

    ctrl.cardTypes = [{label: 'Stávající kartě', value: false}, {label: 'Obnovené kartě', value: true}];


    ctrl.action = function (a) {
      alert(a);
    };

    ctrl.sampleData = [
      {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 1
      },
      {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 2
      }
    ];


    ctrl.sampleData3 = {
      1: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 1
      },
      2: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 2
      },
      3: {
        texts: {
          en: 'english',
          cs: 'cesky'
        },
        value: 3
      }
    };

    ctrl.sampleData4 = [
      {
        label: 'Some label 1',
        value: 1
      },
      {
        label: 'Some label 2',
        value: 2
      },
      {
        label: 'Some label 2',
        value: 3
      }
    ];

    ctrl.sampleCarsData = [
      {
        label: 'Škoda Auto - simple clever',
        value: 'skoda'
      },
      {
        label: 'BMW - as fast as you',
        value: 'bmw'
      }
    ];

    ctrl.sampleCarsData2 = {
      skoda: {
        label: 'Skoda'
      },
      bmw: {
        label: 'bmw'
      },
      merc: {
        label: 'MERC'
      }
    };

    ctrl.proxy = undefined;

    ctrl.banks = [{
      "code": null,
      "bankCode": "NULL007",
      "swift": "NULL007",
      "name": "AGENT 007 BANK",
      "countryId": "CZ",
      "texts": {
        "cs": "AGENT 007",
        "en": "AGENT 007"
      },
      "textId": 1007813,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "5500",
      "bankCode": "RZBCCZPP",
      "swift": "RZBCCZPP",
      "name": "RAIFFEISENBANK A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Raiffeisenbank a.s.", "en": "Raiffeisenbank a.s."},
      "textId": 1007824,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "7980",
      "bankCode": "7980",
      "swift": "7980",
      "name": "WUSTENROT HYPOTECNI BANKA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Wüstenrot hypoteční banka a.s.", "en": "Wüstenrot hypoteční banka a.s."},
      "textId": 1007788,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "8090",
      "bankCode": "CZEECZPP",
      "swift": "CZEECZPP",
      "name": "CZECH EXPORT BANK",
      "countryId": "CZ",
      "texts": {"cs": "Česká exportní banka, a.s.", "en": "Česká exportní banka, a.s."},
      "textId": 1007806,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2010",
      "bankCode": "FIOBCZPP",
      "swift": "FIOBCZPP",
      "name": "FIO BANKA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Fio banka, a.s.", "en": "Fio banka, a.s."},
      "textId": 1007811,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "7960",
      "bankCode": "7960",
      "swift": "7960",
      "name": "CESKOMORAVSKA STAVEBNI SPORITELNA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Českomoravská stavební spořitelna, a.s.", "en": "Českomoravská stavební spořitelna, a.s."},
      "textId": 1007786,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "0600",
      "bankCode": "AGBACZPP",
      "swift": "AGBACZPP",
      "name": "GE MONEY BANK, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "GE Money Bank, a.s.", "en": "GE Money Bank, a.s."},
      "textId": 1007792,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6100",
      "bankCode": "EQBKCZPP",
      "swift": "EQBKCZPP",
      "name": "EQUA BANK A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Equa bank a.s.", "en": "Equa bank a.s."},
      "textId": 1007808,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "5800",
      "bankCode": "JTBPCZPP",
      "swift": "JTBPCZPP",
      "name": "J AND T BANKA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "J & T BANKA, a.s.", "en": "J & T BANKA, a.s."},
      "textId": 1007816,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6000",
      "bankCode": "PMBPCZPP",
      "swift": "PMBPCZPP",
      "name": "PPF BANKA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "PPF banka a.s.", "en": "PPF banka a.s."},
      "textId": 1007822,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "0710",
      "bankCode": "CNBACZPP",
      "swift": "CNBACZPP",
      "name": "CESKA NARODNI BANKA",
      "countryId": "CZ",
      "texts": {"cs": "Česká národní banka", "en": "Česká národní banka"},
      "textId": 1007802,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2020",
      "bankCode": "BOTKCZPP",
      "swift": "BOTKCZPP",
      "name": "BANK OF TOKYO MITSUBISHI UFJ (HOLLAND) N.V. PRAGUE BRANCH",
      "countryId": "CZ",
      "texts": {
        "cs": "Bank of Tokyo-Mitsubishi UFJ (Holland) N.V. Prague Branch, organizační složka",
        "en": "Bank of Tokyo-Mitsubishi UFJ (Holland) N.V. Prague Branch, organizační složka"
      },
      "textId": 1007796,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2600",
      "bankCode": "CITICZPX",
      "swift": "CITICZPX",
      "name": "CITIBANK EUROPE PLC, ORGANIZACNI SLOZKA",
      "countryId": "CZ",
      "texts": {"cs": "Citibank Europe plc, organizační složka", "en": "Citibank Europe plc, organizační složka"},
      "textId": 1007800,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "0300",
      "bankCode": "CEKOCZPP",
      "swift": "CEKOCZPP",
      "name": "CESKOSLOVENSKA OBCHODNI BANKA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Československá obchodní banka, a. s.", "en": "Československá obchodní banka, a. s."},
      "textId": 1007798,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2250",
      "bankCode": "CTASCZ22",
      "swift": "CTASCZ22",
      "name": "ZALOZNA CREDITAS, SPORITELNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {"cs": "Záložna CREDITAS, spořitelní družstvo", "en": "Záložna CREDITAS, spořitelní družstvo"},
      "textId": 1007805,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2030",
      "bankCode": "2030",
      "swift": "2030",
      "name": "AKCENTA, SPORITELNI A UVERNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {"cs": "AKCENTA, spořitelní a úvěrní družstvo", "en": "AKCENTA, spořitelní a úvěrní družstvo"},
      "textId": 1007782,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "0800",
      "bankCode": "GIBACZPX",
      "swift": "GIBACZPX",
      "name": "CESKA SPORITELNA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Česká spořitelna, a.s.", "en": "Česká spořitelna, a.s."},
      "textId": 1007814,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "5000",
      "bankCode": "CRLYCZPP",
      "swift": "CRLYCZPP",
      "name": "CREDIT AGRICOLE",
      "countryId": "CZ",
      "texts": {"cs": "Crédit Agricole", "en": "Crédit Agricole"},
      "textId": 1007804,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2200",
      "bankCode": "2200",
      "swift": "2200",
      "name": "PENEZNI DUM, SPORITELNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {"cs": "Peněžní dům, spořitelní družstvo", "en": "Peněžní dům, spořitelní družstvo"},
      "textId": 1007784,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "7940",
      "bankCode": "SPWTCZ21",
      "swift": "SPWTCZ21",
      "name": "WALDVIERTLER SPARKASSE BRANCH JINDRICHUV HRADEC",
      "countryId": "CZ",
      "texts": {"cs": "Waldviertler Sparkasse Bank AG", "en": "Waldviertler Sparkasse Bank AG"},
      "textId": 1007826,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "0100",
      "bankCode": "KOMBCZPP",
      "swift": "KOMBCZPP",
      "name": "KOMERCNI BANKA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Komerční banka, a.s.", "en": "Komerční banka, a.s."},
      "textId": 1007817,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "4300",
      "bankCode": "CMZRCZP1",
      "swift": "CMZRCZP1",
      "name": "CESKOMORAVSKA ZARUCNI A ROZVOJOVA BANKA, A.S.",
      "countryId": "CZ",
      "texts": {
        "cs": "Českomoravská záruční a rozvojová banka, a.s.",
        "en": "Českomoravská záruční a rozvojová banka, a.s."
      },
      "textId": 1007801,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2070",
      "bankCode": "MPUBCZPP",
      "swift": "MPUBCZPP",
      "name": "MORAVSKY PENEZNI USTAV – SPORITELNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {
        "cs": "Moravský Peněžní Ústav – spořitelní družstvo",
        "en": "Moravský Peněžní Ústav – spořitelní družstvo"
      },
      "textId": 1007819,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2310",
      "bankCode": "ZUNOCZPP",
      "swift": "ZUNOCZPP",
      "name": "ZUNO BANK AG ORGANIZACNI SLOZKA",
      "countryId": "CZ",
      "texts": {"cs": "ZUNO BANK AG, organizační složka", "en": "ZUNO BANK AG, organizační složka"},
      "textId": 1007829,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "5400",
      "bankCode": "ABNACZPP",
      "swift": "ABNACZPP",
      "name": "THE ROYAL BANK OF SCOTLAND N.V. (CZECH REPUBLIC) ",
      "countryId": "CZ",
      "texts": {
        "cs": "The Royal Bank of Scotland plc, organizační složka",
        "en": "The Royal Bank of Scotland plc, organizační složka"
      },
      "textId": 1007791,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6700",
      "bankCode": "SUBACZPP",
      "swift": "SUBACZPP",
      "name": "VSEOBECNA UVEROVA BANKA, A.S. BRANCH PRAHA",
      "countryId": "CZ",
      "texts": {
        "cs": "Všeobecná úverová banka a.s., pobočka Praha; zkráceně: VUB, a.s., pobočka Praha",
        "en": "Všeobecná úverová banka a.s., pobočka Praha; zkráceně: VUB, a.s., pobočka Praha"
      },
      "textId": 1007827,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "7990",
      "bankCode": "7990",
      "swift": "7990",
      "name": "MODRA PYRAMIDA STAVEBNI SPORITELNA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Modrá pyramida stavební spořitelna, a.s.", "en": "Modrá pyramida stavební spořitelna, a.s."},
      "textId": 1007789,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "7970",
      "bankCode": "7970",
      "swift": "7970",
      "name": "WUSTENROT - STAVEBNI SPORITELNA",
      "countryId": "CZ",
      "texts": {"cs": "Wüstenrot - stavební spořitelna", "en": "Wüstenrot - stavební spořitelna"},
      "textId": 1007787,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "8150",
      "bankCode": "MIDLCZPP",
      "swift": "MIDLCZPP",
      "name": "HSBC BANK PLC",
      "countryId": "CZ",
      "texts": {"cs": "HSBC Bank plc - pobočka Praha", "en": "HSBC Bank plc - pobočka Praha"},
      "textId": 1007818,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "7950",
      "bankCode": "7950",
      "swift": "7950",
      "name": "RAIFFEISEN STAVEBNI SPORITELNA A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Raiffeisen stavební spořitelna a.s.", "en": "Raiffeisen stavební spořitelna a.s."},
      "textId": 1007785,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2700",
      "bankCode": "BACXCZPP",
      "swift": "BACXCZPP",
      "name": "UNICREDIT BANK CZECH REPUBLIC,A.S.",
      "countryId": "CZ",
      "texts": {
        "cs": "UniCredit Bank Czech Republic and Slovakia, a.s.",
        "en": "UniCredit Bank Czech Republic and Slovakia, a.s."
      },
      "textId": 1007795,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6200",
      "bankCode": "COBACZPX",
      "swift": "COBACZPX",
      "name": "COMMERZBANK AG",
      "countryId": "CZ",
      "texts": {
        "cs": "COMMERZBANK Aktiengesellschaft, pobočka Praha",
        "en": "COMMERZBANK Aktiengesellschaft, pobočka Praha"
      },
      "textId": 1007803,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6800",
      "bankCode": "VBOECZ2X",
      "swift": "VBOECZ2X",
      "name": "SBERBANK CZ, A.S. ",
      "countryId": "CZ",
      "texts": {"cs": "Sberbank CZ, a.s.", "en": "Sberbank CZ, a.s."},
      "textId": 1007828,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "8060",
      "bankCode": "8060",
      "swift": "8060",
      "name": "STAVEBNI SPORITELNA CESKE SPORITELNY, A.S.",
      "countryId": "CZ",
      "texts": {
        "cs": "Stavební spořitelna České spořitelny, a.s.",
        "en": "Stavební spořitelna České spořitelny, a.s."
      },
      "textId": 1007790,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2100",
      "bankCode": "2100",
      "swift": "2100",
      "name": "HYPOTECNI BANKA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Hypoteční banka, a.s.", "en": "Hypoteční banka, a.s."},
      "textId": 1007783,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2220",
      "bankCode": "ARTTCZPP",
      "swift": "ARTTCZPP",
      "name": "ARTESA, SPORITELNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {"cs": "Artesa, spořitelní družstvo", "en": "Artesa, spořitelní družstvo"},
      "textId": 1007794,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "2060",
      "bankCode": "CITFCZPP",
      "swift": "CITFCZPP",
      "name": "CITFIN, SPORITELNI DRUZSTVO",
      "countryId": "CZ",
      "texts": {"cs": "Citfin, spořitelní družstvo", "en": "Citfin, spořitelní družstvo"},
      "textId": 1007799,
      "separeachable": false,
      "t2Reachable": false
    }, {
      "code": "4000",
      "bankCode": "EXPNCZPP",
      "swift": "EXPNCZPP",
      "name": "EXPOBANK CZ A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Expobank CZ a.s.", "en": "Expobank CZ a.s."},
      "textId": 1007809,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "3500",
      "bankCode": "INGBCZPP",
      "swift": "INGBCZPP",
      "name": "ING BANK N.V.",
      "countryId": "CZ",
      "texts": {"cs": "ING Bank N.V.", "en": "ING Bank N.V."},
      "textId": 1007815,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "8040",
      "bankCode": "OBKLCZ2X",
      "swift": "OBKLCZ2X",
      "name": "OBERBANK AG",
      "countryId": "CZ",
      "texts": {"cs": "Oberbank AG pobočka Česká republika", "en": "Oberbank AG pobočka Česká republika"},
      "textId": 1007821,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "7910",
      "bankCode": "DEUTCZPX",
      "swift": "DEUTCZPX",
      "name": "DEUTSCHE BANK AG",
      "countryId": "CZ",
      "texts": {
        "cs": "Deutsche Bank Aktiengesellschaft Filiale Prag, organizační složka",
        "en": "Deutsche Bank Aktiengesellschaft Filiale Prag, organizační složka"
      },
      "textId": 1007807,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2240",
      "bankCode": "POBNCZPP",
      "swift": "POBNCZPP",
      "name": "POSTOVA BANKA, A.S.,POBOCKA CESKA REPUBLIKA",
      "countryId": "CZ",
      "texts": {
        "cs": "Poštová banka, a.s., pobočka Česká republika",
        "en": "Poštová banka, a.s., pobočka Česká republika"
      },
      "textId": 1007823,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "6210",
      "bankCode": "BREXCZPP",
      "swift": "BREXCZPP",
      "name": "BRE BANK S.A., ORGANIZACNI SLOZKA PODNIKU",
      "countryId": "CZ",
      "texts": {"cs": "mBank S.A., organizační složka", "en": "mBank S.A., organizační složka"},
      "textId": 1007797,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "3030",
      "bankCode": "AIRACZPP",
      "swift": "AIRACZPP",
      "name": "AIR BANK A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Air Bank a.s.", "en": "Air Bank a.s."},
      "textId": 1007793,
      "separeachable": true,
      "t2Reachable": false
    }, {
      "code": "2210",
      "bankCode": "FICHCZPP",
      "swift": "FICHCZPP",
      "name": "EVROPSKO-RUSKA BANKA, A.S.",
      "countryId": "CZ",
      "texts": {"cs": "Evropsko-ruská banka, a.s.", "en": "Evropsko-ruská banka, a.s."},
      "textId": 1007810,
      "separeachable": true,
      "t2Reachable": false
    }];

    ctrl.inactive = [0, 2];
    ctrl.counts = [0, 2, 10];

    ctrl.sampleData2 = ['Item 1', 'Item 2'];


    ctrl.handleChange = function (test) {
      console.log('CHANGEEEEEE: ');
      console.log(test);
    };

    $timeout(function () {
      //ctrl.proxy = {
      //  5500: {code: '5500', bankCode: 'Raifka'},
      //  6100: {code: '6100', bankCode: 'Equa'}
      //};
      ctrl.proxy = ctrl.banks;
      ctrl.nullModel = '5500';
    }, 1000)

  }
})();

(function(){
  'use strict';
  angular.module('ingredients.modules',
    ['iForm.module', 'iValid.module', 'iModal.module', 'iFile.module', 'iUtils.module', 'iStep.module']);
})();

angular.module("angular-ingredients.js").run(["$templateCache", function($templateCache) {$templateCache.put("app/samples/select.sample.html","<h3>{{item.text}}</h3><small>{{item.value}}</small>");
$templateCache.put("app/samples/step1.sample.html","<h1>Some step #1</h1><small>some some text</small><p>{{::ctrl.sampleData}}</p><button i-step-next=\"\">Continue</button>");
$templateCache.put("app/samples/step2.sample.html","<h1>Some step #2</h1><small>some some text</small>");
$templateCache.put("app/modules/iFile/iFile.template.html","<div class=\"i-file-upload clearfix\"><div class=\"preview\" ng-if=\"!multifile && result\"><img ng-src=\"{{result}}\"></div><div class=\"previewWrapper\" ng-if=\"multifile !== undefined\"><div class=\"preview\" ng-click=\"removeFile($index)\" ng-repeat=\"preview in result track by $index\"><img ng-src=\"{{preview}}\"></div></div><label class=\"fileInput fc-plus-circle\"><input class=\"hidden\" type=\"file\">Drop and drop<div class=\"uploadMessage message\" ng-show=\"uploadedSuccessfully\">Uploaded OK</div><div class=\"uploadError message\" ng-show=\"uploadError\">Upload Failed</div></label><div class=\"filesCount\" ng-if=\"multifile && result\">{{result.length}}</div></div>");
$templateCache.put("app/modules/iModal/imodal.template.html","<div class=\"i-modal\"><div class=\"i-content\"><div ng-click=\"closeModal()\" class=\"i-close\"><i class=\"remove icon big\"></i></div><ng-transclude></ng-transclude></div></div>");
$templateCache.put("app/modules/iStep/iStep.template.html","<div class=\"i-step\"><ng-include src=\"iStepCtrl.activeStep\"></ng-include><ng-transclude></ng-transclude><div class=\"dots\"><div class=\"dot\" ng-repeat=\"dot in iStepCtrl.steps\" ng-click=\"iStepCtrl.goTo(dot)\" ng-class=\"{active: iStepCtrl.amIActive(dot)}\"></div></div></div>");
$templateCache.put("app/modules/iForm/components/alert/alert.template.html","<div class=\"i-alert i-alert-{{ alert.type }}\"><div ng-if=\"alert.title\" class=\"i-alert-header\">{{alert.title}}</div><div ng-repeat=\"message in alert.messages\">{{message}}</div></div>");
$templateCache.put("app/modules/iForm/components/button/button.template.html","<button xid=\"{{xid}}\" ng-class=\"{fill: fill, small: small, disabled: iDisabled}\" class=\"i-button\" name=\"{{name}}\">{{title}}</button>");
$templateCache.put("app/modules/iForm/components/error/error.template.html","<i-alert ng-if=\"show\" title=\"{{title}}\" type=\"error\" messages=\"errors\"></i-alert>");
$templateCache.put("app/modules/iForm/components/row/row.template.html","<div xid=\"{{xid}}\" class=\"i-row {{ classes }}\"><div ng-if=\"rowLabel\" class=\"i-row-label\"><div ng-class=\"{\'required-mark\': (required === \'true\')}\" class=\"label\" ng-bind=\"rowLabel\"></div><small ng-if=\"optional\" class=\"optional\">({{optional}})</small><rb-helper ng-if=\"tooltip\" tooltip=\"{{tooltip}}\"></rb-helper></div><div class=\"i-row-content\" ng-class=\"{labeled: rowLabel}\" ng-transclude=\"\"></div></div>");
$templateCache.put("app/modules/iForm/components/select/select.template.html","<div xid=\"{{iSelect.xid}}\" class=\"i-select ng-cloak\" ng-class=\"{inline: iSelect.inline, nolabel: !iSelect.label}\" ng-model=\"iSelect.model\" i-valid=\"{{iSelect.validate}}\" name=\"{{iSelect.name}}\" label=\"{{iSelect.label}}\"><label class=\"i-field-label\" ng-if=\"iSelect.label\" ng-bind=\"iSelect.label\"></label><rb-helper ng-if=\"iSelect.tooltip\" tooltip=\"{{iSelect.tooltip}}\"></rb-helper><div class=\"read-only\" ng-show=\"iSelect.readOnly\" ng-bind=\"iSelect.getReadOnlyValue()\"></div><div ng-hide=\"iSelect.readOnly\"><div ng-hide=\"iSelect.searchable\" class=\"current-value\" ng-click=\"iSelect.toggleList()\"><span>{{ iSelect.getReadOnlyValue() }}</span></div><div ng-show=\"iSelect.searchable\" class=\"i-select-search\"><input type=\"text\" ng-model=\"iSelect.searchQuery\" ng-change=\"iSelect.openList()\" placeholder=\"{{iSelect.placeholder}}\" on-enter=\"iSelect.handleInputEvents()\" i-max-length=\"{{iSelect.maxLength}}\" i-format=\"{{iSelect.format}}\" ng-click=\"iSelect.emitEvent()\"><div class=\"reset-button\" ng-if=\"iSelect.searchable && iSelect.searchQuery\" ng-click=\"iSelect.handleReset()\"><i class=\"ion-ios-close-empty\"></i></div></div><div class=\"i-select-toggle\" ng-click=\"iSelect.toggleList()\"><div ng-if=\"!iSelect.searchable\" class=\"ion-arrow-down-b i-select-toggle-icon\"></div><div ng-if=\"iSelect.searchable\" class=\"ion-search i-select-toggle-icon\"></div></div><div class=\"i-select-list\" ng-show=\"iSelect.listToggle\" ng-class=\"{nolabel: !iSelect.label}\"><div class=\"is-array\"><div ng-if=\"iSelect.template\" ng-include=\"iSelect.template\" class=\"i-select-item\" data-index=\"{{ item[iSelect.returnAs] || $index}}\" ng-repeat=\"item in iSelect.listData | filter: iSelect.searchQuery track by $index\" ng-click=\"iSelect.handleSelect(item)\"></div><div ng-if=\"!iSelect.template\" class=\"i-select-item\" data-index=\"{{ item[iSelect.returnAs] || $index}}\" ng-repeat=\"item in iSelect.listData | filter: iSelect.searchQuery track by $index\" ng-click=\"iSelect.handleSelect(item)\" ng-bind=\"iSelect.retrieveProperty(item, iSelect.viewAs)\"></div></div></div></div></div>");
$templateCache.put("app/modules/iForm/components/switch/iSwitch.template.html","<div xid=\"{{vm.xid}}\" class=\"i-switch\" ng-model=\"vm.model\" i-valid=\"{{vm.validate}}\" name=\"{{vm.name}}\"><div class=\"read-only\" ng-show=\"vm.readOnly\" ng-bind=\"vm.viewValue()\"></div><div class=\"i-switch-option\" set-width=\"{{vm.getDataLength()}}\" ng-show=\"!vm.readOnly\" ng-repeat=\"option in vm.options track by $index\" ng-click=\"vm.handleClick(option, $index)\" ng-class=\"{active: vm.isActive(option, $index), inactive: vm.isInactive($index)}\" data-index=\"{{vm.resolveFn(option, $index)}}\"><div class=\"i-switch-label\">{{option[vm.viewAs] || option || $index}}</div><div class=\"count\" ng-if=\"vm.counts[$index] > -1\">{{vm.getCount($index)}}</div></div></div>");
$templateCache.put("app/modules/iForm/components/text/text.template.html","<div xid=\"{{xid}}\" class=\"i-text\"><div ng-if=\"label\" ng-class=\"{inline: inline}\" class=\"i-text-label\" ng-bind=\"label\"></div><div class=\"i-text-output\" ng-bind=\"model\" ng-class=\"{inline: inline, nolabel: !label}\"></div></div>");}]);